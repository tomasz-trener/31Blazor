@page "/products/editProduct/{Id:int}"
@inject IProductService ProductService
@inject NavigationManager NavigationManager
<h3>EditProduct</h3>

@if(product == null)
{
    <p>@message</p>
}
else
{
    <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
        <div class="form-group">
            <label for="Title">Title</label>
            <InputText class="form-control" id="Title" @bind-Value="product.Title" />
        </div>
        <div class="form-group">
            <label for="Barcode">Barcode</label>
            <InputText class="form-control" id="Barcode" @bind-Value="product.Barcode" />
        </div>
        <div class="form-group">
            <label for="Price">Price</label>
            <InputNumber class="form-control" id="Price" @bind-Value="product.Price" />
        </div>
        <div class="form-group">
            <label for="ReleaseDate">Release Date</label>
            <InputDate class="form-control" id="ReleaseDate" @bind-Value="product.ReleaseDate" />
        </div>
        <div class="form-group">
            <label for="Description">Description</label>
            <InputTextArea class="form-control" id="Description" @bind-Value="product.Description" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Product product;
    private string message = "Loading product...";

    protected override async Task OnInitializedAsync()
    {
        var response = await ProductService.GetProductAsync(Id);
        if (response.Success)
            product = response.Data;
        else
            message = response.Message;
    }

    private async Task HandleValidSubmit()
    {
        var response = await ProductService.UpdateProductAsync(product);
        if (response.Success)
            NavigationManager.NavigateTo("/products/productsList");
        else
            message = response.Message;
    }
}
